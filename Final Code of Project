import smbus        #import SMBus module of I2C
from time import sleep
import math
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import serial
import math

plt.ion()
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

serPort = serial.Serial('/dev/ttyACM1',9600)
serPort.flush()

#some MPU6050 Registers and their Address
PWR_MGMT_1   = 0x6B
SMPLRT_DIV   = 0x19
CONFIG       = 0x1A
GYRO_CONFIG  = 0x1B
INT_ENABLE   = 0x38
ACCEL_XOUT_H = 0x3B
ACCEL_YOUT_H = 0x3D
ACCEL_ZOUT_H = 0x3F
GYRO_XOUT_H  = 0x43
GYRO_YOUT_H  = 0x45
GYRO_ZOUT_H  = 0x47
def MPU_Init():
        #write to sample rate register
	bus.write_byte_data(Device_Address, SMPLRT_DIV, 7)
	
	#Write to power management register
	bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)
	
	#Write to Configuration register
	bus.write_byte_data(Device_Address, CONFIG, 0)
	
	#Write to Gyro configuration register
	bus.write_byte_data(Device_Address, GYRO_CONFIG, 24)
	
	#Write to interrupt enable register
	bus.write_byte_data(Device_Address, INT_ENABLE, 1)

def read_raw_data(addr):
	#Accelero and Gyro value are 16-bit
	high = bus.read_byte_data(Device_Address, addr)
	low = bus.read_byte_data(Device_Address, addr+1)
    
	#concatenate higher and lower value
	value = ((high << 8) | low)
	
	#to get signed value from mpu6050
	if(value > 32768):
		value = value - 65536
	return value

bus = smbus.SMBus(1) 	# or bus = smbus.SMBus(0) for older version boards
Device_Address = 0x68   # MPU6050 device address
MPU_Init()

ax.set_ylim(-100,100)
ax.set_xlim(-100,100)
ax.set_zlim(-100,100)
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')
ax.set_title('lidar_data')

while True:
    serPort = serial.Serial('/dev/ttyACM1',9600)
    v =serPort.readline()
    data = v.split()
    data = list(map(float,data))

    acc_x = read_raw_data(ACCEL_XOUT_H)
    acc_y = read_raw_data(ACCEL_YOUT_H)
    acc_z = read_raw_data(ACCEL_ZOUT_H)
    

    Ax = acc_x/16384.0
    Ay = acc_y/16384.0
    Az = acc_z/16384.0


    x_angle = math.atan2(Ay,math.sqrt(Ax*Ax+Az*Az))#*3.14/180
    y_angle = math.atan2(-Ax,math.sqrt(Ay*Ay+Az*Az))#*3.14/180
    x_coordinate = data[0]*math.cos(y_angle)*math.cos(x_angle)
    y_coordinate = data[0]*math.cos(y_angle)*math.sin(x_angle)
    z_coordinate = data[0]*math.sin(y_angle)

    ax.plot([x_coordinate],[y_coordinate],[z_coordinate],'r.')
    plt.draw()
  plt.pause(0.02)
    print('x_coordinate',x_coordinate)
    print('y_coordinate',y_coordinate)
    print('z_coordinate',z_coordinate)
    print('data',data)
    print('x_angle',x_angle)
    print('y_angle',y_angle)
